scalar Date

type Consumer {
    _id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    password: String
    dateOfBirth: Date
    gender: Gender
    address1: String
    address2: String
    suburb: String
    postcode: String
    state: String
    country: String
}

type AuthData {
    token: String
    consumerId: String
}

type Country {
    isoCode: String
    name: String
    currency: String
}

type State {
    isoCode: String
    name: String
}

enum Gender {
    MALE
    FEMALE
    OTHER
    NOTSAY
}

input ConsumerCreateInputData {
    email: String!
    firstName: String!
    lastName: String!
    password: String!
}

type Query {
    login(email: String, password: String): AuthData!
    consumer: Consumer!
}

type Mutation {
    createConsumer(consumerInput: ConsumerCreateInputData): Consumer!
}
